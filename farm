-- DISCORD-STYLE ASCENDANT AUTOFARM

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local TeleportService = game:GetService("TeleportService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local TweenService = game:GetService("TweenService")
local HttpService = game:GetService("HttpService")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

local mobs = {
	{ name = "EvilCarrot", questId = 21 },
	{ name = "Sdjkfjsdgha", questId = 20 },
	{ name = "DemonSlime", questId = 19 }
}
local keys = { "E", "R", "C", "F" }

-- Create Discord UI
local gui = Instance.new("ScreenGui", PlayerGui)
gui.Name = "AscendantAutoFarm_UI"
gui.ResetOnSpawn = false

local frame = Instance.new("Frame", gui)
frame.Size = UDim2.new(0, 320, 0, 200)
frame.Position = UDim2.new(0, 25, 0.5, -100)
frame.BackgroundColor3 = Color3.fromRGB(44, 47, 51)
frame.BorderSizePixel = 0
frame.Active = true
frame.Draggable = true

local corner = Instance.new("UICorner", frame)
corner.CornerRadius = UDim.new(0, 10)

local header = Instance.new("TextLabel", frame)
header.Size = UDim2.new(1, 0, 0, 30)
header.BackgroundTransparency = 1
header.Text = "Ascendant AutoFarm ðŸ’»"
header.Font = Enum.Font.Code
header.TextColor3 = Color3.fromRGB(220, 220, 220)
header.TextSize = 18

local status = Instance.new("TextLabel", frame)
status.Size = UDim2.new(1, -20, 0, 24)
status.Position = UDim2.new(0, 10, 0, 35)
status.BackgroundTransparency = 1
status.Text = "Status: Starting..."
status.Font = Enum.Font.Code
status.TextColor3 = Color3.fromRGB(160, 160, 160)
status.TextSize = 14
status.TextXAlignment = Enum.TextXAlignment.Left

local mobTimers = {}
for i, mob in ipairs(mobs) do
	local lbl = Instance.new("TextLabel", frame)
	lbl.Size = UDim2.new(1, -20, 0, 20)
	lbl.Position = UDim2.new(0, 10, 0, 60 + (i - 1) * 22)
	lbl.BackgroundTransparency = 1
	lbl.Text = mob.name .. ": Waiting..."
	lbl.Font = Enum.Font.Code
	lbl.TextColor3 = Color3.fromRGB(200, 200, 200)
	lbl.TextSize = 14
	lbl.TextXAlignment = Enum.TextXAlignment.Left
	mobTimers[mob.name] = lbl
end

-- UTILITIES
local function showStatus(msg)
	status.Text = "Status: " .. msg
end

local function pressKeys()
	for _, key in ipairs(keys) do
		VirtualInputManager:SendKeyEvent(true, key, false, nil)
		task.wait(0.02)
		VirtualInputManager:SendKeyEvent(false, key, false, nil)
	end
end

local function getQuest(id)
	ReplicatedStorage.Modules.Net["RE/Quest"]:FireServer("GetAscendantQuest", id)
end

local function weldToMob(mob)
	local char = LocalPlayer.Character
	if not char or not char:FindFirstChild("HumanoidRootPart") then return end
	local hrp = char.HumanoidRootPart

	local weld = Instance.new("WeldConstraint")
	weld.Part0 = hrp
	weld.Part1 = mob
	weld.Parent = hrp
	hrp.Anchored = false
	hrp.AssemblyLinearVelocity = Vector3.zero
end

local function findMob(mobName)
	local spawn = workspace:FindFirstChild("Spawns"):FindFirstChild(mobName)
	if spawn and spawn:FindFirstChild(mobName) then
		local mob = spawn[mobName]
		if mob:FindFirstChild("Humanoid") and mob.Humanoid.Health > 0 then
			return mob:FindFirstChild("HumanoidRootPart") or mob:FindFirstChildWhichIsA("BasePart")
		end
	end
	return nil
end

local function updateTimers()
	local timers = ReplicatedStorage:WaitForChild("RespawnTimers")
	for _, mob in ipairs(mobs) do
		local folder = timers:FindFirstChild(mob.name)
		if folder then
			local now = workspace:GetServerTimeNow()
			local start = folder:FindFirstChild("StartTime") and folder.StartTime.Value or 0
			local remain = folder:FindFirstChild("RemainingTime") and folder.RemainingTime.Value or 0
			local endTime = start + remain
			if now < endTime then
				local left = endTime - now
				local m = math.floor(left / 60)
				local s = math.floor(left % 60)
				mobTimers[mob.name].Text = string.format("%s: %02d:%02d", mob.name, m, s)
			else
				mobTimers[mob.name].Text = mob.name .. ": Ready"
			end
		end
	end
end

local function serverHop()
	showStatus("Server hopping...")
	local servers = {}
	local ok, result = pcall(function()
		return HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" .. game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"))
	end)
	if ok and result and result.data then
		for _, v in ipairs(result.data) do
			if v.playing < v.maxPlayers then
				table.insert(servers, v.id)
			end
		end
	end
	if #servers > 0 then
		local chosen = servers[math.random(1, #servers)]
		TeleportService:TeleportToPlaceInstance(game.PlaceId, chosen, LocalPlayer)
	end
end

local function autoFarm()
	while true do
		updateTimers()
		local found = false
		for _, mob in ipairs(mobs) do
			local mobPart = findMob(mob.name)
			if mobPart then
				showStatus("Fighting " .. mob.name)
				getQuest(mob.questId)
				task.wait(0.2)
				LocalPlayer.Character:WaitForChild("HumanoidRootPart").CFrame = mobPart.CFrame
				weldToMob(mobPart)
				pressKeys()
				found = true
				break
			end
		end
		if not found then
			showStatus("No mobs. Switching...")
			task.wait(1.5)
			serverHop()
			break
		end
		task.wait(0.3)
	end
end

-- GO
showStatus("Initializing...")
task.wait(1)
autoFarm()

-- AUTO EXECUTION FOR SERVERHOP:
if queue_on_teleport then
	queue_on_teleport([[
	loadstring(game:HttpGet("https://pastebin.com/raw/XS5wWe4A"))()
	]])
end
